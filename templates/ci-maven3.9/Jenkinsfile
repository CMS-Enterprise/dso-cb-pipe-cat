def Map properties=[
    artifactName: "${artifact_name}",
    artifactoryProjectName: "${artifactory_project_name}",
    tech: "maven3.9",
    javaVersion: "${java_version}",
    buildArgs: "${build_args}",
    testArgs: "${test_args}",
    packageArgs: "${package_args}",
    ghOrg: "${gh_org}",
    sonarqube: [
        projectKey: "${sq_project_key}"
    ],
    build: [
        dockerargs: "${docker_args}",
        artifactoryPath: "${artifactory_path}",
        workDir: "${work_directory}",
        dockerFile: "${docker_file}"
    ],
    snyk: [
        orgId: "${org_id}"
    ]
] 
@Library("dso-shared-lib@main") _
def podYaml = libraryResource "podTemplates/${properties.tech}-java${properties.javaVersion}-agent.yaml"
pipeline {
    agent{
        kubernetes {
            yaml podYaml
        }
    }
    stages{
        stage ("init"){
            steps {
                container ("jnlp"){
                    sh "echo init"
 //                       init()
                }
            }
        }
         stage ("maven compile"){
            steps {
                container ("maven"){
                    script{
                        maven.compile(properties.buildArgs)
                    }
                }
            }
        }
         stage ("maven test"){
            steps {
                container ("maven"){
                    script{
                        maven.test(properties.testArgs)
                    }
                }
            }
        }
        stage ("maven package"){
            steps {
                container ("maven"){
                    script{
                        maven.mvnPackage(properties.packageArgs)
                    }
                }
            }
        }
         stage ("sonarqube scan"){
            steps {
                container ("sonarqube"){
                    script{               
                        sonarqube.scan(properties)
                    }
                }
            }
        }
         stage ("snyk"){
            steps {
                container ("snyk"){
                    script{   
                        snyk.snykCodeTest(properties)             
                        snyk.snykTest(properties)
                    }
                }
            }
        }
         stage ("kaniko upload"){
            steps {
                container ("kaniko"){
                    script{
                        kaniko.push(properties)
                    }
                }
            }
        }
         stage ("jfrog xray"){
            steps {
                container ("jfrog"){
                    script{               
                        jfrog.jfrogXray(properties)
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                notification.success(properties)
            }
        }
        failure {
            script{
                notification.failure(properties)
            }
        }
    }
}