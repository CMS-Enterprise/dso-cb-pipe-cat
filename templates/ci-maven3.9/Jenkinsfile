def Map properties=[
    appName: "${app_name}",
    tech: "${tech}",
    javaVersion: "${javaVersion}",
    buildArgs: "${buildArgs}",
    testArgs: "${testArgs}",
    packageArgs: "${packageArgs}",
    ghOrg: "${gh_org}",
    sonarqube: [
        projectKey: "${sq_project_key}"
    ],
    build: [
        dockerargs: "${docker_args}",
        artifactoryPath: "${artifactory_path}",
        workDir: "${work_directory}",
        dockerFile: "${docker_file}"
    ]
] 
@Library("dso-shared-lib@main") _
def podYaml = libraryResource "podTemplates/${tech}-${javaVersion}-agent.yaml"
pipeline {
    agent{
        kubernetes {
            yaml podYaml
        }
    }
    stages{
        stage ("init"){
            steps {
                container ("jnlp"){
                    sh "echo init"
 //                       init()
                }
            }
        }
         stage ("maven compile"){
            steps {
                container ("maven"){
                    script{
                        maven.compile()
                    }
                }
            }
        }
         stage ("maven test"){
            steps {
                container ("maven"){
                    script{
                        maven.test()
                    }
                }
            }
        }
        stage ("maven package"){
            steps {
                container ("maven"){
                    script{
                        maven.mvnPackage()
                    }
                }
            }
        }
        //  stage ("sonarqube scan"){
        //     steps {
        //         container ("sonarqube"){
        //             script{               
        //                 sonarqube.scan(properties)
        //             }
        //         }
        //     }
        // }
         stage ("kaniko upload"){
            steps {
                container ("kaniko"){
                    script{
                        kaniko.push(properties)
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                notification.success(properties)
            }
        }
        failure {
            script{
                notification.failure(properties)
            }
        }
    }
}