def Map properties=[
    appName: "${app_name}",
    tech: "${tech}",
    ghOrg: "${gh_org}",
    sonarqube: [
        projectKey: "${sq_project_key}"
    ],
    build: [
        dockerargs: "${docker_args}",
        artifactoryPath: "${artifactory_path}",
        workDir: "${work_directory}",
        dockerFile: "${docker_file}"
    ],
    snyk: [
        orgId: "${org_id}"
    ]
] 
@Library("dso-shared-lib@main") _
def podYaml = libraryResource "podTemplates/dotnetcore6-agent.yaml"
pipeline {
    agent{
        kubernetes {
            yaml podYaml
        }
    }
    stages{
        stage ("init"){
            steps {
                container ("jnlp"){
                    sh "echo init"
 //                       init()
                }
            }
        }
         stage ("dotnet build"){
            steps {
                container ("dotnetcore6"){
                    script{
                        dotnet.build()
                    }
                }
            }
        }
         stage ("dotnet test"){
            steps {
                container ("dotnetcore6"){
                    script{
                        dotnet.test()
                    }
                }
            }
        }
         stage ("sonarqube scan"){
            steps {
                container ("sonarqube"){
                    script{               
                        sonarqube.scan(properties)
                    }
                }
            }
        }
         stage ("snyk"){
            steps {
                container ("snyk"){
                    script{         
                        snyk.snykCodeTest(properties)       
                        snyk.snykTest(properties)
                    }
                }
            }
        }
         stage ("kaniko upload"){
            steps {
                container ("kaniko"){
                    script{
                        kaniko.push(properties)
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                notification.success(properties)
            }
        }
        failure {
            script{
                notification.failure(properties)
            }
        }
    }
}