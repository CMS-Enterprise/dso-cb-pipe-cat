def Map properties=[
    emailRecipient: "${email_recipient}",
    artifactName: "",
    artifactoryProjectName: "${artifactory_project_name}",
    artifactPackagePath: "${artifact_package_path}",
    tech: "gradle",
    buildArgs: "${build_args}",
    testArgs: "${test_args}",
    javaVersion: "${java_version}",
    ghOrg: "${gh_org}",
    adoIAMRole: "${ado_iam_role}",
    sonarqube: [
        projectKey: "${sq_project_key}"
    ],
    build: [
        dockerargs: "${docker_args}",
        artifactHost: "${artifact_host}",
        workDir: "${work_directory}",
        dockerFile: "${docker_file}",
        zipPath: "${zip_path}",
        fileName: "${file_name}"
    ],
    snyk: [
        orgId: "${org_id}",
        gradleBuildPath: "${gradle_build_path}"
    ]
] 
@Library("dso-shared-lib@develop") _
def podYaml = libraryResource "podTemplates/gradle-java${properties.javaVersion}-agent.yaml"
pipeline {
    agent{
        kubernetes {
            yaml podYaml
        }
    }
    stages{
        stage ("init"){
            steps {
                container ("jnlp"){
                    script{
                        init.paramValidator(properties)
                        init.getArtifactName(properties)
                        gradle.setGradlePropsFile()
                    }
                }
            }
        }
        stage ("gradle build"){
            steps {
                container ("gradle"){
                    script{
                        gradle.gradleBuild(properties.buildArgs)
                    }
                }
            }
        }
        stage ("gradle test"){
            steps {
                container ("gradle"){
                    script{
                        gradle.gradleTest(properties.testArgs)
                        gradle.removeGradlePropsFile()
                    }
                }
            }
        }
         stage ("sonarqube scan"){
            steps {
                container ("sonarqube"){
                    script{               
                        sonarqube.scan(properties)
                    }
                }
            }
        }
         stage ("snyk"){
            steps {
                container ("snyk"){
                    script{      
                        snyk.snykCodeTest(properties)         
                        snyk.snykTest(properties)
                    }
                }
            }
        }
        stage('Artifactory Publish') {
            steps {
                container ("awscli"){
                    script{
                        aws.assumeRole(properties.adoIAMRole)
                    }
                 }
                container('kaniko') {
                    script {
                        logger.stage()
                        kaniko.push(properties) //optional, for container builds
                    }
                }
                container('base-agent') {
                    script {
                        zip.zipBuild(properties)
                    }
                }
                container('jfrog') {
                    script {
                        // jfrog.buildDockerCreateAndPublish(properties) //optional, for container builds
                        jfrog.upload(properties) // optional for non-container builds
                        // jfrog.metaDataTagging(properties)
                    }
                }
            }
        }
         stage ("jfrog xray"){
            steps {
                container ("jfrog"){
                    script{               
                        jfrog.jfrogXray(properties)
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                notification.success(properties)
            }
        }
        failure {
            script{
                notification.failure(properties)
            }
        }
    }
}