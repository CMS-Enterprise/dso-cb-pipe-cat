def Map properties=[
    tech: "terraform",
    slackNotification: "${slack_notification}",
    ghOrg: "${gh_org}",
    buildArgs: "${build_args}",
    testArgs: "${test_args}",
    adoIAMRole: "${ado_iam_role}",
    deploy: [
        workDir: "${work_directory}",
        tfVar: "${tf_var_file}",
        backendConfigFile: "${backend_config_file}"
    ],
    snyk: [
        orgId: "${org_id}"
    ],
    sonarqube: [
        projectKey: "${sq_project_key}"
    ]
] 
def sharedLibraryBranch
if (env.devopsDebugOverridesSharedLibraryBranch){ sharedLibraryBranch = env.devopsDebugOverridesSharedLibraryBranch }
else { sharedLibraryBranch = "main" }

library "dso-shared-lib@${sharedLibraryBranch}"
def podYaml = libraryResource "podTemplates/terraform-agent.yaml"
pipeline {
    agent{
        kubernetes {
            yaml podYaml
        }
    }
    stages{
        stage ("Init"){
            steps {
                container ("jnlp"){
                    script{
                        init.terraformParamValidator(properties)
                    }
                }
            }
        }
        stage ("AWS Assume Role"){
            steps {
                container ("awscli"){
                    script{
                        aws.assumeRole(properties.adoIAMRole)
                    }
                }
            }
        }
        stage ("tf init"){
            steps {
                container ("tfenv"){
                    script{
                        terraform.init(properties)
                    }
                }
            }
        }
        stage ("tf test"){
            steps {
                container ("tfenv"){
                    script{
                        terraform.test(properties)
                    }
                }
            }
        }
        stage ("Sonarqube"){
            when {
                expression { return properties.sonarqube.projectKey }
            }
            steps {
                container ("sonarqube"){
                    script{               
                        sonarqube.scan(properties)
                    }
                }
            }
        }
        stage ("Snyk"){
            when {
                expression { return properties.snyk.orgId }
            }
            steps {
                container ("snyk"){
                    script{         
                        snyk.snykIac(properties)
                    }
                }
            }
        }   
        stage ("tf plan"){
            steps {
                container ("tfenv"){
                    script{
                        terraform.plan(properties)
                    }
                }
            }
        }
        stage ("tf apply"){
            input {
                message "Proceed with apply?"
                ok "Proceed"
            }
            steps {
                container ("tfenv"){
                    script{               
                        terraform.apply(properties)
                    }
                }
            }
        }
        // FOR TESTING PURPOSES ONLY
        // stage ("tfdestroy"){
        //     steps {
        //         container ("tfenv"){
        //             script{               
        //                 terraform.destroy(properties)
        //             }
        //         }
        //     }
        // }
    }
    post {
        success {
            script{
                if (properties.slackNotification && (properties.slackNotification != "#example-channel")) {
                    notification.success(properties)
                    slackSend(channel: "${properties.slackNotification}", message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' completed successfully. See details: ${env.BUILD_URL}")
                }
            }
        }
        failure {
            script{
                if (properties.slackNotification && (properties.slackNotification != "#example-channel")) {
                    notification.failure(properties)
                    slackSend(channel: "${properties.slackNotification}", message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed. Check it out: ${env.BUILD_URL}")
                }
            }
        }
    }
}