def Map properties=[
    tech: "terraform",
    slackNotification: "${slack_notification}",
    ghOrg: "${gh_org}",
    buildArgs: "${build_args}",
    testArgs: "${test_args}",
    deploy: [
        workDir: "${work_directory}",
        tfVar: "${tf_var_file}",
        backendConfigFile: "${backend_config_file}",
        awsRoleArn: "${aws_role_arn}"
    ]
] 
def sharedLibraryBranch
if (env.devopsDebugOverridesSharedLibraryBranch){ sharedLibraryBranch = env.devopsDebugOverridesSharedLibraryBranch }
else { sharedLibraryBranch = "main" }

library "dso-shared-lib@${sharedLibraryBranch}"
def podYaml = libraryResource "podTemplates/terraform-agent.yaml"
pipeline {
    agent{
        kubernetes {
            yaml podYaml
        }
    }
    stages{
        stage ("init"){
            steps {
                container ("jnlp"){
                    script{
                        init.paramValidator(properties)
                    }
                }
            }
        }
         stage ("tfinit"){
            steps {
                container ("base-agent"){
                    script{
                        terraform.init(properties.deploy)
                    }
                }
            }
        }
         stage ("tfplan"){
            steps {
                container ("base-agent"){
                    script{
                        terraform.plan(properties.deploy)
                    }
                }
            }
        }
         stage ("tfapply"){
            steps {
                container ("base-agent"){
                    script{               
                        terraform.apply(properties.deploy)
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                if (properties.slackNotification && (properties.slackNotification != "#example-channel")) {
                    notification.success(properties)
                    slackSend(channel: "${properties.slackNotification}", message: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' completed successfully. See details: ${env.BUILD_URL}")
                }
            }
        }
        failure {
            script{
                if (properties.slackNotification && (properties.slackNotification != "#example-channel")) {
                    notification.failure(properties)
                    slackSend(channel: "${properties.slackNotification}", message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed. Check it out: ${env.BUILD_URL}")
                }
            }
        }
    }
}