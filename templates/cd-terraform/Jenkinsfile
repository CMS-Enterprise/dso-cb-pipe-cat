def Map properties=[
    github_repo: "${github_repo}",
    appName: "${app_name}",
    tech: "terraform",
    buildArgs: "${build_args}",
    testArgs: "${test_args}",
    ghOrg: "${gh_org}",
    deploy: [
        workDir: "${work_directory}",
        tfVar: "${tf_var_file}",
        backendConfigFile: "${backend_config_file}",
        awsRoleArn: "${aws_role_arn}"
    ]
]
// TODO Snyk IAC

@Library("dso-shared-lib@terraform-tfvars") _
def podYaml = libraryResource "podTemplates/terraform-agent.yaml"

pipeline {
    agent{
        kubernetes {
	    yaml podYaml
         }
    }
    
    stages{
        stage ("awsinit"){
            steps {
                container("awscli"){
                    script{
                        aws.assumeRole(properties)
                    }
                }
            }
        }
        stage ("tfinit"){
            steps {
                container ("tfenv"){
                    script{
                        terraform.init(properties)
                    }
                }
            }
        }
        stage ("tftest"){
            steps {
                container ("tfenv"){
                    script{
                        terraform.test(properties)
                    }
                }
            }
        }       
        stage ("tfplan"){
            steps {
                container ("tfenv"){
                    script{
                        terraform.plan(properties)
                    }
                }
            }
        }
        stage ("tfapply"){
            steps {
                container ("tfenv"){
                    script{
                        terraform.apply(properties)
                    }
                }
            }
        }
    }
    post {
        success {
            script{
                notification.success(properties)
            }
        }
        failure {
            script{
                notification.failure(properties)
            }
        }
    }
 }
